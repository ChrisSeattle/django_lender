## Features Checklist

Multiple stages of working on this project.

## Code 29 Version

- [ ] Using the Django documentation for templating create a fully featured set of templates for your lender application
- [ ] Your application should be able to display records belonging to a single user in a list view, as well as any single resource in a detail view
        Note: you do not need to worry about taking user input for this application.
- [ ] Ensure that you are using proper semantic HTML5 tags in your templates
- [ ] Take advantage of filters and other features made available by the Django Templating Language to present your application’s data in a well formatted way
- [ ] Style your application using CSS, and ensure that your static assets are loading when your run your local development server
Testing
- [ ] You will be extending your view controllers today, so adjust any existing view controller tests to accommodate for the new HTML that you are rendering and sending back to the client in the response.
General
- [x] New branch with appropriate name
- [x] Prepare Checklist to use with assignment completion
- [x] Update README as appropriate


## Code 28 Version

- [x] Create a navigation menu in your base.html template, do that today
- [x] Using the provided templates/ directory, copy that directory and all of it’s contents to the same templates/ directory in your root application
- [ ] Following the documentation, paying close attention to available context data in each view, configure each file to suit the needs of your application
- [x] You will also need a directory for your base.html and home.html
- [ ] Configure email services for Django for email confirmation.
- [ ] For Dev, make sure that you configure the Django console email backend. Then any emails you send while working will simply print to the console where Django is running
Testing
- [ ] Continue to develop your unit test coverage within the application; focusing on writing at least three assertions for each model or controller that you define
- [ ] To test registration you will want to be aware of how Django’s email services work in a test environment
General
- [x] New branch with appropriate name
- [x] Prepare Checklist to use with assignment completion
- [x] Update README as appropriate

## Code 27 Version

- [x] Modify the contents of the templates/ directory to include a base.html and home.html
- [x] Create a simple view controller for the home route, which renders the home.html document
- [x] Create a new app inside your project called lender_books
- [x] Add your new app to the settings.py, and configure the urls for this new app at the root level of your project
Working in the lender-books/ directory:
- [x] Create a new model for Book, which represents an item that will be lent to another person, with the following attributes
- [ ] stretch goal - cover_image: An image field
- [x] title: Text field
- [x] author: Text field
- [x] year: Multiple choice field for year published
- [x] status: Multiple choice field for available or checked-out statuses
- [x] date_added: Auto-generated date field
- [x] last_borrowed: Auto-updated date field
- [x] Create a new template called book_list.html that inherits from base.html, which will render out a list of all books in the system for the current user
- [x] Create a new template called book_detail.html that inherits from base.html, which will render out the detail for a single book
- [x] Create a simple view controller for each of the templates defined above
- [x] Create a urls.py for this app, which connects your view controllers and their templates to your application at an appropriate route
- [x] Use docker-compose to run makemigrations and migrate once you’ve configured your new model.
- [x] You will want to use the Admin console to add some records to your database, so you can verify that data is correctly rendering on the site
- [x] Run your application and ensure that all things are as they should be!
Testing
- [ ] You are required to meet or exceed an 80% coverage benchmark for this application.
- [ ] Your focus for the time being will be unit testing your view controllers and models, and you should follow our standard format of roughly three test assertions for each controller or model you define for the application
        Note: Be sure you do not test functionality that Django provides
General
- [x] New branch with appropriate name
- [x] Prepare Checklist to use with assignment completion
- [x] Update README as appropriate
https://canvas.instructure.com/courses/1380083/assignments/9089087
https://youtu.be/DO76Y5_qkY0?t=34m


### Code 26 Version

- [x] Ensure that you’ve installed Docker on your local machine
- [x] Create a new project & repository called django_lender
- [x] Add all of you standard config files
- [x] Recreate the Dockerfile and docker-compose.yml that we configured in lecture, update each file as needed for this new project
- [x] Install django and psycopg2-binary as a dependency for your project
- [x] Create your Django application and configure the settings to utilize the necessary environment variables
- [x] Update the DATABASE configuration in settings.py to address a PostgreSQL database using the following config:
      DATABASES = {
          'default': {
              'ENGINE': 'django.db.backends.postgresql',
              'NAME': os.environ.get('DB_NAME'),
              'USER': os.environ.get('DB_USER'),
              'PASSWORD': os.environ.get('DB_PASSWORD'),
              'HOST': os.environ.get('DB_HOST'),
              'PORT': 5432,
              'TEST': {
                  'NAME': 'lender_test'
              }
          }
      }
- [x] After config complete, run docker-compose up --build to start up your application,
- [x] open 127.0.0.1:8000 in the browser to validate that your application is running and functional
- [x] Prepare Checklist to use with assignment completion
- [x] No Tests at this time.
- [x] Update README as appropriate

